se_kernel(l = 3)
se_kernel <- function(l, r = 1){
fun <- function(r){
l = l
return (exp(-0.5 * (r/l)^2))
}
return (fun)
}
se_kernel(2)
se_kernel(2)(1)
se_kernel(2)
?colMeans
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
pick_kernel(c(1,2))
pick_kernel('se',c(1,2))
pick_kernel('se',list(1,2))
pick_kernel <- function (para_list, method = c('se', 'm', 'exp')){
# todo: check dimension of inputs
if (method == 'se'){
return (do.call(se_kernel, para_list))
}
if (method == 'm'){
return (do.call(matern_kernel, para_list))
}
if (method == 'exp'){
return (do.call(exp_kernel, para_list))
}
}
pick_kernel(c(1,2))
pick_kernel(c(1,2), method = "e")
t = pick_kernel(c(1,2), method = "e")
t
pick_kernel <- function (para_list, method = c('se', 'm', 'exp')){
# todo: check dimension of inputs
method = match.arg(method0)
if (method == 'se'){
return (do.call(se_kernel, para_list))
}
if (method == 'm'){
return (do.call(matern_kernel, para_list))
}
if (method == 'exp'){
return (do.call(exp_kernel, para_list))
}
}
t = pick_kernel(c(1,2), method = "e")
#' @examples
pick_kernel <- function (para_list, method = c('se', 'm', 'exp')){
# todo: check dimension of inputs
method = match.arg(method)
if (method == 'se'){
return (do.call(se_kernel, para_list))
}
if (method == 'm'){
return (do.call(matern_kernel, para_list))
}
if (method == 'exp'){
return (do.call(exp_kernel, para_list))
}
}
t = pick_kernel(c(1,2), method = "e")
t = pick_kernel(list(1,2), method = "e")
t
t = pick_kernel(list(1,2))
t
pick_kernel(list(1,2,3), "se")
?outer
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
library(standardGP)
library(usethis)
use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
expect_equal(2 * 2, 4)
library(tinytest)
install.packages("tinytest")
expect_equal(2 * 2, 4)
library(tinytest)
expect_equal(2 * 2, 4)
library(standardGP)
library(standardGP)
library(standardGP)
library(standardGP)
expect_equal(2 * 2, 4)
library('tinytest')
expect_equal(2 * 2, 4)
n = 300
p = 10
nt = 100
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
k = se_kernel(2)
co_out <- covariance_mats(X, Xt, k)
expect_equal(dim(co_out$K)[1], n)
expect_equal(dim(co_out$K)[2], n)
expect_equal(dim(co_out$Ks)[1], nt)
expect_equal(dim(co_out$Ks)[2], p)
expect_equal(dim(co_out$Ks[1,2]), se_kernel(2)(X[1,], X[2,]))
se_kernel(2)(X[1,], X[2,])
se_kernel(2)(get_r(X[1,], X[2,]))
expect_equal(2 * 2, 4) # depends on library "tinytest"
n = 300
p = 10
nt = 100
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
k = se_kernel(2)
co_out <- covariance_mats(X, Xt, k)
expect_equal(dim(co_out$K)[1], n)
expect_equal(dim(co_out$K)[2], n)
expect_equal(dim(co_out$Ks)[1], nt)
expect_equal(dim(co_out$Ks)[2], p)
expect_equal(dim(co_out$Ks[1,2]), se_kernel(2)(get_r(X[1,], X[2,])))
expect_equal(co_out$Ks[1,2], se_kernel(2)(get_r(X[1,], X[2,])))
expect_equal(co_out$K[1,2], se_kernel(2)(get_r(X[1,], X[2,])))
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_equal(co_out$K[1,2], se_kernel(2)(get_r(X[1,], X[2,])))
co_out <- covariance_mats(X, Xt, k)
expect_equal(co_out$K[1,2], se_kernel(2)(get_r(X[1,], X[2,])))
expect_equal(co_out$K[3,2], se_kernel(2)(get_r(X[2,], X[3,])))
expect_equal(co_out$Ks[4,2], se_kernel(2)(get_r(Xt[4,], X[2,])))
expect_equal(co_out$ks[4,2], se_kernel(2)(get_r(Xt[4,], X[2,])))
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
Xt_e <- matrix(rnorm(nt* 5, 0), nt, 5)
expect_error(covariance_mats(X, Xt, k), "Dimensions of X and Xt do not match!")
Xt_e <- matrix(rnorm(nt* 5, 0), nt, 5)
expect_error(covariance_mats(X, Xt_e, k), "Dimensions of X and Xt do not match!")
expect_equal(exp_kernel(2)(3), exp(-3/2))
expect_error(exp_kernel(-1)(3), "l needs to be positive")
expect_error(exp_kernel(-1), "l needs to be positive")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
n = 300
p = 10
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
x1 = X[1,]
x2 = X[2,]
expect_equal(get_r(x1, x2), sqrt(sum((x1 - x2)^2)))
dim(X)
dim(x1)
length(x1)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_equal(get_r(x1, x2), sqrt(sum((x1 - x2)^2)))
x2 = c(3,4)
expect_error(get_r(x1, x2), "Dimensions of x1 and x2 do not match!")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
gpr_cv(X, y, k, sigma2, num_folds, NULL)
n = 1000
p = 10
n_kernels = 3
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
y = matrix(rnorm(n), n, 1)
num_folds=3
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
gpr_cv(X, y, k, sigma2, num_folds, NULL)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
n = 100
p = 10
n_kernels = 3
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
y = matrix(rnorm(n), n, 1)
num_folds=3
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
gpr_cv(X, y, k, sigma2, num_folds, NULL)
gpr_seq_out$mse
cv_folds[fold]
fold
cv_folds
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
n = 100
p = 10
n_kernels = 3
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
y = matrix(rnorm(n), n, 1)
num_folds=3
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
gpr_cv(X, y, k, sigma2, num_folds, NULL)
cv_folds[fold]
cv_folds
fold
t(gpr_seq_out$mse)
cv_folds[fold,] <- t(gpr_seq_out$mse)
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
n = 100
p = 10
n_kernels = 3
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
y = matrix(rnorm(n), n, 1)
num_folds=3
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
gpr_cv(X, y, k, sigma2, num_folds, NULL)
k = se_kernel(3)
gpr_cv(X, y, k, sigma2, num_folds)
# pass in one kernel
k = se_kernel(3)
gpr_cv(X, y, k, sigma2, num_folds, NULL)
fold_ids = sample((1:10) %% 2 + 1, 10)
num_folds = 2
is.null(fold_ids) && !(is.null(num_folds))
max(fold_ids)
num_folds = max(fold_ids)
fold_ids
n = 100
p = 10
n_kernels = 3
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
y = matrix(rnorm(n), n, 1)
num_folds=3
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
gpr_cv(X, y, k, sigma2, num_folds, NULL)
n = 50 # number of inputs
p = 10 # number of features
n_kernels = 3 # number of kernels
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
y <- matrix(rnorm(n), n, 1)
num_folds=3
fold_ids <- sample((1:n) %% num_folds + 1, n)
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
# function output
out <- gpr_cv(X, y, k, sigma2, num_folds, fold_ids)
# mannual calculation
nkernels <- length(k)
cv_folds <- matrix(rep(0, num_folds * nkernels), num_folds, nkernels)
for (fold in 1:num_folds) {
# split data into training set and testing set
Xtrain <- X[fold_ids != fold, ]
ytrain <- y[fold_ids != fold]
Xtest <- X[fold_ids == fold, ]
ytest <- y[fold_ids == fold]
# train models with sequence of kernels
gpr_seq_out <- gpr_seq_kernels(Xtrain, ytrain, k, sigma2, Xtest, ytest)
# browser()
cv_folds[fold,] <- t(gpr_seq_out$mse)
}
# take avg. mse of each kernels
cvm <- colMeans(cv_folds)
# check and compare
expect_equal(out$cvm, cvm)
y_e <- matrix(rnorm(2*n), 2*n, 1)
expect_error(gpr_cv(X, y_e, k, sigma2, num_folds, fold_ids), "Dimension of X and y does not match!")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
n = 100
p = 10
nt = 50
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
y <- matrix(rnorm(n), n, 1)
yt <- matrix(rnorm(nt), nt, 1)
k = c(se_kernel(3), se_kernel(3))
sigma2 <- 5
Xte <- matrix(rnorm( nt *5, 0, 0.3), nt, 5)
ye <- matrix(rnorm(nt), nt, 1)
yte <- matrix(rnorm(0.8*nt), 0.8*nt, 1)
expect_error(gpr_seq_kernels(X, y, k, sigma2, Xte, yt), "Dimensions of X and Xt do not match!")
expect_error(gpr_seq_kernels(X, ye, k, sigma2, Xt, yt), "Dimensions of X and y do not match!")
expect_error(gpr_seq_kernels(X, y, k, sigma2, Xt, yte), "Dimensions of Xt and yt do not match!")
expect_error(gpr_seq_kernels(X, y, k, sigma2, Xte, yt), "Dimensions of X and Xt do not match!")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_seq_kernels(X, y, k, sigma2, Xte, yt), "Dimensions of X and Xt do not match!")
expect_error(gpr_seq_kernels(X, ye, k, sigma2, Xt, yt), "Dimensions of X and y do not match!")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_seq_kernels(X, ye, k, sigma2, Xt, yt), "Dimensions of X and y do not match!")
expect_error(gpr_seq_kernels(X, y, k, sigma2, Xt, yte), "Dimensions of Xt and yt do not match!")
expect_error(gpr_seq_kernels(X, y, k, sigma2, Xt, yte), "Dimensions of yt and Xt do not match!")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_seq_kernels(X, y, k, sigma2e, Xt, yt), "Sigma2 needs to be positive!")
sigma2e <- -1
expect_error(gpr_seq_kernels(X, y, k, sigma2e, Xt, yt), "Sigma2 needs to be positive!")
# output from the function
out <- gpr_seq_kernels(X, y, k, sigma2, Xt, yt)
##  manual calcuations
# standardize inputs
standardized_out <- standardize(X, y, Xt, yt)
X = standardized_out$X
y = standardized_out$y
Xt = standardized_out$Xt
yt = standardized_out$yt
# get K and Ks, covariance matrix
# standardized gaussian process regression for each k
mse <- matrix(rep(0, length(k)))
for (i in 1 : length(k)){
if (length(k) == 1) {k_single = k} else {k_single = k[[i]]}
cov_out <- covariance_mats(X, Xt, k_single)
K = cov_out$K
ks = cov_out$ks
gpr_out <- gpr_standardized(X, y, k_single, sigma2, Xt, yt, K, ks)
# evaluate mse for each kernels
mse[i] = sum((gpr_out$fs - yt)^2)/nt
}
expect_error(out$mse, mse)
expect_equal(out$mse, mse)
# intended inputs
n = 100
p = 10
nt = 50
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
y <- matrix(rnorm(n), n, 1)
yt <- matrix(rnorm(nt), nt, 1)
k = c(se_kernel(3), se_kernel(3))
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
# intended inputs
n = 100
p = 10
nt = 50
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
y <- matrix(rnorm(n), n, 1)
yt <- matrix(rnorm(nt), nt, 1)
k = c(se_kernel(3), se_kernel(3))
sigma2 <- 5
# inputs used to test dimension checks
Xte <- matrix(rnorm( nt *5, 0, 0.3), nt, 5)
ye <- matrix(rnorm(nt), nt, 1)
yte <- matrix(rnorm(0.8*nt), 0.8*nt, 1)
sigma2e <- -1
out <- gpr_seq_kernels(X, y, k, sigma2, Xt, yt)
co_out <- covariance_mats(X, Xt, k)
k = se_kernel(2)
co_out <- covariance_mats(X, Xt, k)
is.positive.definite(K, tol=1e-8)
library(matrixcalc)
install.packages("matrixcal")
library(matrixcalc)
library(matrixcal)
library(matrixcalc)
install.packages("matrixcalc")
remove.packages("matrixcal")
library(matrixcalc)
is.positive.definite(K,tol=1e-8)
is.positive.definite(co_out$K,tol=1e-8)
is.positive.definite(co_out$K,tol=1e-10)
is.positive.definite(co_out$Ks,tol=1e-10)
is.positive.definite(co_out$ks,tol=1e-10)
k = c(se_kernel(3), se_kernel(3))
k[1]
k[[1]]
Ke <- matrix(rep(0, n*n),n*n)
sigma2e <- 1e-8
# test dimension checks
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, K, ks), "K + sigma2*I is not positive definite. Can not
perform cholesky decomposition.
Consider increasing sigma2.")
library('tinytest')
library('tinytest')
Ke <- matrix(rep(0, n*n),n*n)
sigma2e <- 1e-8
# test dimension checks
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, K, ks), "K + sigma2*I is not positive definite. Can not
perform cholesky decomposition.
Consider increasing sigma2.")
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, K, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
# intent inputs
n = 100 # number of inputs
p = 10 # number of features
nt = 50 # number of test inputs
n_kernels = 3 # number of kernels
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
y <- matrix(rnorm(n), n, 1)
yt <- matrix(rnorm(nt), nt, 1)
num_folds=3
fold_ids <- sample((1:n) %% num_folds + 1, n)
sigma2 = 10
k = c(se_kernel(3), se_kernel(3))
# inputs used to test dimension checks
Ke <- matrix(rep(0, n*n),n*n)
sigma2e <- 1e-8
# test dimension checks
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
k = k[[1]]
ks = Ke
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
ks = matrix(rep(0, nt*n),nt*n)
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
gpr_standardized(X, y, k, sigma2, Xt, yt, Ke, ks)
dim(K)
dim(Ke)
Ke <- matrix(rep(0, n*n),n, n)
ks = matrix(rep(0, nt*n),nt,n)
expect_error(gpr_standardized(X, y, k, sigma2, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
!is.positive.definite(Ke + sigma2 * diag(n))
is.positive.definite(Ke + sigma2 * diag(n))
ks = matrix(rep(1, nt*n),nt,n)
Ke <- matrix(rep(1, n*n),n, n)
is.positive.definite(Ke + sigma2 * diag(n))
simga2
sigma2e
is.positive.definite(Ke + sigma2e * diag(n))
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
Ke <- matrix(rep(0, n*n),n, n)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
!is.positive.definite(Ke + sigma2e * diag(n))
is.positive.definite(Ke + sigma2e * diag(n))
ke[:10.:10]
ke[:10.1:10]
ke[1:10.1:10]
Ke[1:10.1:10]
Ke[1:10,1:10]
sigma2e <- 1e-10
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
is.positive.definite  (Ke + sigma2e * diag(n), tol=1e-10)
is.positive.definite  (Ke + 1e-10 * diag(n), tol=1e-10)
is.positive.definite  (matrix(rep(1, n*n), n,n) + 1e-10 * diag(n), tol=1e-10)
is.positive.definite  (matrix(rep(0, n*n), n,n) + 1e-10 * diag(n), tol=1e-10)
Ke <- matrix(rep(1, n*n),n, n)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
Ke <- matrix(rep(1, n*n),n, n)
sigma2e <- 1e-10
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
(!(is.positive.definite(K + sigma2 * diag(n), tol=1e-10)))
(!(is.positive.definite(Ke + sigma2e * diag(n), tol=1e-10)))
Ke[1,1]
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
(!(is.positive.definite(Ke + sigma2e * diag(n), tol=1e-10)))
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition. Consider increasing sigma2.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesky decomposition.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "test")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite. Can not perform cholesterol decomposition.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2*I is not positive definite.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "K + sigma2 I is not positive definite.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "Can not perform cholesky decomposition.")
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_error(gpr_standardized(X, y, k, sigma2e, Xt, yt, Ke, ks), "Can not perform cholesky decomposition. Increase sigma2.")
cov_out <- covariance_mats(X, Xt, k)
K = cov_out$K
ks = cov_out$ks
out <- gpr_standardized(X, y, k, sigma2, Xt, yt, K, ks)
##  manual calcuations
L = chol(K + sigma2 * diag(n))
# find predictive mean
alpha = solve(t(L)) %*% (solve(L) %*% y)
fs = ks %*% alpha
# find predictive variance
v = solve(L) %*% t(ks)
r = matrix(rep(0, nt), nt)
for (i in 1:nt){
r[i] = get_r(Xt[i,], Xt[i,])
}
Vfs = k(r) - colSums(v^2)
# calculate log marginal likelihood
logp = -1/2 * crossprod(y, alpha) - sum(log(diag(L))) - n/2 * log(2*pi)
## check
expect_equal(out$fs, fs)
## check
expect_equal(out$fs, fs)
expect_equal(out$Vfs, Vfs)
expect_equal(out$logp, logp)
expect_equal(matern_kernel(2,3)(4), 1 / gamma(3) / 2^(3-1) * (sqrt(2*3)/ 2 * 4)^ 3 * besselK(sqrt(2*3) * 4 / 2, nu = 3))
expect_error(matern_kernel(-2,3)(4), "l needs to be positive")
expect_error(matern_kernel(2,-3)(4), "v needs to be positive")
expect_equal(pick_kernel(list(2,3), 'se'), "squared exponential kernel needs 1 parameter")
t = list(2,3)
length(t)
expect_error(pick_kernel(list(2,3), 'se'), "squared exponential kernel needs 1 parameter")
expect_error(pick_kernel(list(2,3,4), 'm'), "matern kernel needs 2 parameter")
expect_error(pick_kernel(list(2,3), 'exp'), "exponential kernel needs 1 parameter")
expect_equal(pick_kernel(list(2), 'se')(3), exp(-0.5 * (3/2)^2))
expect_equal(pick_kernel(list(2), 'exp')(3), exp(-3/2))
expect_error(pick_kernel(list(2,3), 'm')(4), 1 / gamma(3) / 2^(3-1) * (sqrt(2*3)/ 2 * 4)^ 3 * besselK(sqrt(2*3) * 4 / 2, nu = 3))
expect_equal(pick_kernel(list(2,3), 'm')(4), 1 / gamma(3) / 2^(3-1) * (sqrt(2*3)/ 2 * 4)^ 3 * besselK(sqrt(2*3) * 4 / 2, nu = 3))
expect_equal(pick_kernel(list(2,3))(3), exp(-0.5 * (3/2)^2))
pick_kernel(list(2,3))
pick_kernel(list(2,3), NULL)
expect_equal(pick_kernel(list(2))(3), exp(-0.5 * (3/2)^2))
source("C:/Users/Carrie/Desktop/Study/TAMU/Classes/STAT 600/Project_Rpackage/R/gp.R", echo=TRUE)
expect_equal(pick_kernel(list(2))(3), exp(-0.5 * (3/2)^2))
expect_equal(se_kernel(2)(4), exp(-0.5 * (4/2)^2))
expect_error(se_kernel(-2)(4), "l needs to be positive")
n = 100 # number of inputs
p = 10 # number of features
nt = 50 # number of test inputs
X <- matrix(rnorm(n*p, 0, 0.3), n, p)
Xt <- matrix(rnorm(nt*p, 0), nt, p)
y <- matrix(rnorm(n), n, 1)
yt <- matrix(rnorm(nt), nt, 1)
out <- standardize(X,y,Xt,yt)
colmean(out$X)
colMeans(out$X)
expect_equal(colMeans(out$X),rep(0,p))
var(out$X)
sapply(out$X, var)
colVars(out$X)
expect_equal(var(out$X[,1]),1)
expect_equal(mean(out$y[,1]),0)
expect_equal(var(out$y[,1]),1)
expect_equal(colMeans(out$Xt),rep(0,p))
expect_equal(var(out$Xt[,1]),1)
expect_equal(mean(out$yt[,1]),0)
expect_equal(var(out$yt[,1]),1)
expect_equal(colMeans(out$Xt),rep(0,p))
use_readme_rmd()
